[package]
name = "zng"
version = "0.3.0"
authors = ["The Zng Project Developers"]
edition = "2021"
license = "Apache-2.0 OR MIT"
readme = "../README.md"
description = "Cross-platform GUI framework."
documentation = "https://zng-ui.github.io/doc/zng"
repository = "https://github.com/zng-ui/zng"
categories = ["gui"]
keywords = ["gui", "ui", "user-interface", "zng"]

[features]
default = ["ipc", "debug_default", "view_software"]

# Enables pre-build views and connecting to views running in another process.
# 
# Enabled by default.
ipc = ["zng-app/ipc", "zng-view-api/ipc", "zng-view?/ipc"]

# Enables http tasks.
http = ["zng-task/http", "zng-wgt/http", "zng-ext-image/http"]

# Enable the `"dyn_*"`, `"inspector"` features for debug builds only.
#
# Enabled by default.
debug_default = [
    "zng-app/debug_default",
    "zng-wgt-inspector/debug_default",
    "zng-wgt-scroll/debug_default",
    "zng-wgt-window/debug_default",
]

# Use more dynamic dispatch at the node level by enabling `UiNode::cfg_boxed` to box.
#
# This speeds-up compilation time at the cost of runtime.
dyn_node = ["zng-app/dyn_node"]

# Instrument each property and widget instance with "Inspector" nodes and
# extend windows to be inspected on Ctrl+Shift+I.
inspector = ["zng-app/inspector", "zng-wgt-inspector/live"]

# Use dynamic dispatch at the app-extension level.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = ["zng-app/dyn_app_extension"]

# Box closures at opportune places, such as `Var::map`, reducing the number of monomorphised types.
#
# This speeds-up compilation time at the cost of runtime.
dyn_closure = [
    "zng-wgt/dyn_closure",
    "zng-wgt-scroll/dyn_closure",
    "zng-wgt-window/dyn_closure",
]

# Test utilities.
#
# USAGE:
#
# Build with this feature to use the core test helper types that show
# in the documentation.
test_util = ["zng-app/test_util", "zng-ext-window/test_util"]

# Allows multiple app instances per-process.
#
# This feature allows multiple apps, one app per thread at a time. The `LocalContext` tracks
# what app is currently running in each thread and `app_local!` statics switch to the value of each app
# depending on the current thread.
#
# Not enabled by default, but enabled by `feature="test_util"`.
multi_app = ["zng-app/multi_app"]

# Instrument every widget outer-most node to trace UI methods.
trace_widget = ["zng-app/trace_widget"]

# Instrument every property and intrinsic node to trace UI methods.
#
# Note that this can cause very large trace files and bad performance.
trace_wgt_item = ["zng-app/trace_wgt_item"]

# Spawns a thread on app creation that checks and prints `parking_lot` deadlocks.
#
# Not enabled by default.
deadlock_detection = ["zng-app/deadlock_detection"]

# Embed hyphenation dictionaries for all supported languages.
#
# If enabled some 2.8MB of data is embedded, you can provide an alternative dictionary source using the 
# `Hyphenation::dictionary_source` method.
#
# Not enabled by default.
hyphenation_embed_all = ["zng-ext-font/hyphenation_embed_all"]

# Include all Material Icons icon sets in the default app.
#
# Not enabled by default.
material_icons = [
    "material_icons_outlined",
    "material_icons_filled",
    "material_icons_rounded",
    "material_icons_sharp",
]
# Material Icons Outlined icon set.
#
# If enabled some icons of this set are used for some of the commands.
#
# Not enabled by default.
material_icons_outlined = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/outlined",
]

# Material Icons Filled icon set.
#
# Not enabled by default.
material_icons_filled = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/filled",
]

# Material Icons Rounded icon set.
#
# Not enabled by default.
material_icons_rounded = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/rounded",
]

# Material Icons Sharp icon set.
#
# Not enabled by default.
material_icons_sharp = [
    "dep:zng-wgt-material-icons",
    "zng-wgt-material-icons/embedded",
    "zng-wgt-material-icons/sharp",
]

# Enable TOML configs.
toml = ["zng-ext-config/toml"]
# Enable RON configs.
ron = ["zng-ext-config/ron"]
# Enable YAML configs.
yaml = ["zng-ext-config/yaml"]

# Include the default view-process implementation.
view = ["dep:zng-view"]
# Enables software renderer fallback in the default view-process.
#
# If enabled and a native OpenGL 3.2 driver is not available the `swgl` software renderer is used.
#
# Feature enabled by default.
view_software = ["zng-view?/software"]

# Include the default view-process implementation as an embedded precompiled binary.
view_prebuilt = ["dep:zng-view-prebuilt", "ipc"]

[dependencies]
# foundation
zng-clone-move = { path = "../zng-clone-move", version = "0.2.2" }
zng-txt = { path = "../zng-txt", version = "0.2.3" }
zng-state-map = { path = "../zng-state-map", version = "0.2.3" }
zng-app-context = { path = "../zng-app-context", version = "0.3.0" }
zng-layout = { path = "../zng-layout", version = "0.2.4" }
zng-var = { path = "../zng-var", version = "0.2.4" }
zng-task = { path = "../zng-task", version = "0.2.4" }
zng-color = { path = "../zng-color", version = "0.2.4" }

# view
zng-view-api = { path = "../zng-view-api", version = "0.2.4", default-features = false }
zng-view = { path = "../zng-view", version = "0.2.4", default-features = false, optional = true }
zng-view-prebuilt = { path = "../zng-view-prebuilt", version = "0.3.0", optional = true }

# app
zng-app = { path = "../zng-app", version = "0.3.0" }
zng-ext-fs-watcher = { path = "../zng-ext-fs-watcher", version = "0.2.4" }
zng-ext-config = { path = "../zng-ext-config", version = "0.2.4", default-features = false }
zng-ext-font = { path = "../zng-ext-font", version = "0.3.0" }
zng-ext-l10n = { path = "../zng-ext-l10n", version = "0.3.0" }
zng-ext-image = { path = "../zng-ext-image", version = "0.2.4" }
zng-ext-clipboard = { path = "../zng-ext-clipboard", version = "0.2.4" }
zng-ext-window = { path = "../zng-ext-window", version = "0.2.4" }
zng-ext-input = { path = "../zng-ext-input", version = "0.3.0" }
zng-ext-undo = { path = "../zng-ext-undo", version = "0.2.4" }

# widgets
zng-wgt = { path = "../zng-wgt", version = "0.2.4" }
zng-wgt-access = { path = "../zng-wgt-access", version = "0.2.4" }
zng-wgt-transform = { path = "../zng-wgt-transform", version = "0.2.4" }
zng-wgt-input = { path = "../zng-wgt-input", version = "0.2.4" }
zng-wgt-data = { path = "../zng-wgt-data", version = "0.2.4" }
zng-wgt-filter = { path = "../zng-wgt-filter", version = "0.2.4" }
zng-wgt-size-offset = { path = "../zng-wgt-size-offset", version = "0.2.4" }
zng-wgt-container = { path = "../zng-wgt-container", version = "0.2.4" }
zng-wgt-undo = { path = "../zng-wgt-undo", version = "0.2.4" }
zng-wgt-data-view = { path = "../zng-wgt-data-view", version = "0.2.4" }
zng-wgt-fill = { path = "../zng-wgt-fill", version = "0.2.4" }
zng-wgt-style = { path = "../zng-wgt-style", version = "0.2.4" }
zng-wgt-checkerboard = { path = "../zng-wgt-checkerboard", version = "0.2.4" }
zng-wgt-window = { path = "../zng-wgt-window", version = "0.2.5" }
zng-wgt-layer = { path = "../zng-wgt-layer", version = "0.2.4" }
zng-wgt-undo-history = { path = "../zng-wgt-undo-history", version = "0.2.5" }
zng-wgt-image = { path = "../zng-wgt-image", version = "0.2.5" }
zng-wgt-text = { path = "../zng-wgt-text", version = "0.2.5" }
zng-wgt-text-input = { path = "../zng-wgt-text-input", version = "0.2.5" }
zng-wgt-button = { path = "../zng-wgt-button", version = "0.2.5" }
zng-wgt-stack = { path = "../zng-wgt-stack", version = "0.2.4" }
zng-wgt-panel = { path = "../zng-wgt-panel", version = "0.2.5" }
zng-wgt-grid = { path = "../zng-wgt-grid", version = "0.2.4" }
zng-wgt-wrap = { path = "../zng-wgt-wrap", version = "0.2.5" }
zng-wgt-rule-line = { path = "../zng-wgt-rule-line", version = "0.2.5" }
zng-wgt-toggle = { path = "../zng-wgt-toggle", version = "0.2.5" }
zng-wgt-menu = { path = "../zng-wgt-menu", version = "0.2.5" }
zng-wgt-scroll = { path = "../zng-wgt-scroll", version = "0.2.4" }
zng-wgt-ansi-text = { path = "../zng-wgt-ansi-text", version = "0.2.5" }
zng-wgt-tooltip = { path = "../zng-wgt-tooltip", version = "0.2.5" }
zng-wgt-markdown = { path = "../zng-wgt-markdown", version = "0.2.5" }
zng-wgt-inspector = { path = "../zng-wgt-inspector", version = "0.2.5" }

zng-wgt-material-icons = { path = "../zng-wgt-material-icons", version = "0.2.5", default-features = false, optional = true }

[package.metadata.docs.rs]
all-features = true
rustdoc-args = [
    "--html-in-header",
    "target/doc/zng-material-icons-extensions.html",
]
