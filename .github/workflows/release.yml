name: Tag and Release

on:
  push:
    branches: [ "release" ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: '--codegen=debuginfo=0 --deny=warnings'
  RUSTDOCFLAGS: '--deny=warnings'
  CARGO_TERM_COLOR: always

jobs:
  check-ubuntu:
    runs-on: ubuntu-lastest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do version --verbose 
      - run: cargo do fmt --check
      - run: cargo check
      - run: cargo do clean # to print size
  check-windows:
    runs-on: windows-lastest
    env:
      CC: 'clang-cl'
      CXX: 'clang-cl'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do version --verbose 
      - run: cargo do fmt --check
      - run: cargo check
      - run: cargo do clean
  check-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do version --verbose 
      - run: cargo do fmt --check
      - run: cargo check
      - run: cargo do clean

  doc-ubuntu:
    runs-on: ubuntu-latest
    needs: ['check-ubuntu']
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do doc
      - uses: actions/upload-artifact@v4
        with:
          name: doc
          path: target/doc
      - run: cargo clean

  prebuild-ubuntu:
    runs-on: ubuntu-latest
    needs: ['check-ubuntu']
    steps:
      - name: install dav1d dep nasm
        uses: ilammy/setup-nasm@v1
      - name: install dav1d python deps
        run: |
          pip install -U pip
          pip install -U wheel setuptools
          pip install -U meson ninja
      - name: build dav1d
        env:
          DAV1D_DIR: dav1d_dir
          LIB_PATH: lib/x86_64-linux-gnu
        run: |
          git clone --branch 1.3.0 --depth 1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson build -Dprefix=$HOME/$DAV1D_DIR -Denable_tools=false -Denable_examples=false -Ddefault_library=static --buildtype release
          ninja -C build
          ninja -C build install
          echo "PKG_CONFIG_PATH=$HOME/$DAV1D_DIR/$LIB_PATH/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$HOME/$DAV1D_DIR/$LIB_PATH" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do comment_feature -u "zng-view/Cargo.toml" avif
      - name: cargo do prebuild --features avif
        env:
          SYSTEM_DEPS_LINK: static
        run: cargo do prebuild --features avif
      - run: cargo clean
      - run: cargo do comment_feature "zng-view/Cargo.toml" avif
      - name: upload prebuilt
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-ubuntu
          path: zng-view-prebuilt/lib/libzng_view.so
  prebuild-windows:
    runs-on: windows-latest
    needs: ['check-windows']
    steps:
      - name: config msvc for dav1d
        uses: ilammy/msvc-dev-cmd@v1
      - name: install dav1d dep nasm
        uses: ilammy/setup-nasm@v1
      - name: install dav1d python deps
        run: |
          pip install -U pip
          pip install -U wheel setuptools
          pip install -U meson ninja
      - name: setup dav1d env
        shell: bash
        run: |
          echo "PKG_CONFIG=c:\build\bin\pkg-config.exe" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\build\lib\pkgconfig" >> $GITHUB_ENV
          echo "C:\build\bin" >> $GITHUB_PATH
      - name: build dav1d dep pkg-config
        run: |
          git clone --branch meson-glib-subproject --depth 1 https://gitlab.freedesktop.org/tpm/pkg-config.git
          cd pkg-config
          meson build -Dprefix=C:\build --buildtype release
          ninja -C build
          ninja -C build install
      - name: build dav1d
        run: |
          git clone --branch 1.3.0 --depth 1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson build -Dprefix=C:\build -Denable_tools=false -Denable_examples=false -Ddefault_library=static --buildtype release
          ninja -C build
          ninja -C build install

      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do comment_feature -u "zng-view/Cargo.toml" avif
      - name: cargo do prebuild --features avif
        env:
          CC: clang-cl
          CXX: clang-cl
          SYSTEM_DEPS_LINK: static
        run: cargo do prebuild --features avif
      - run: cargo clean
      - run: cargo do comment_feature "zng-view/Cargo.toml" avif
      - name: upload prebuilt
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-windows
          path: zng-view-prebuilt/lib/zng_view.dll
  prebuild-macos:
    runs-on: macos-13
    needs: ['check-macos']
    steps:
      - name: install dav1d dep nasm
        uses: ilammy/setup-nasm@v1
      - name: install dav1d python deps
        run: |
          pip install -U pip
          pip install -U wheel setuptools
          pip install -U meson ninja
      - name: build dav1d
        env:
          DAV1D_DIR: dav1d_dir
          LIB_PATH: lib
        run: |
          git clone --branch 1.3.0 --depth 1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson build -Dprefix=$HOME/$DAV1D_DIR -Denable_tools=false -Denable_examples=false -Ddefault_library=static --buildtype release
          ninja -C build
          ninja -C build install
          echo "PKG_CONFIG_PATH=$HOME/$DAV1D_DIR/$LIB_PATH/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$HOME/$DAV1D_DIR/$LIB_PATH" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do comment_feature -u "zng-view/Cargo.toml" avif
      - name: cargo do prebuild --features avif
        env:
          SYSTEM_DEPS_LINK: static
        run: cargo do prebuild --features avif
      - run: cargo clean
      - run: cargo do comment_feature "zng-view/Cargo.toml" avif
      - name: upload prebuilt
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-macos
          path: zng-view-prebuilt/lib/libzng_view.dylib

  test-ubuntu:
    runs-on: ubuntu-latest
    needs: ['prebuild-ubuntu']
    steps:
      - name: install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
        with:
          ref: release
      - name: install prebuilt
        uses: actions/download-artifact@v4
        with:
          name: prebuilt-ubuntu
          path: zng-view-prebuilt/lib
      - run: cargo to test --lib --bins --tests --nextest
      - run: cargo clean
      - run: cargo do test --doc
      - run: cargo clean
      - run: cargo do test --macro --all
      - run: cargo clean
  test-windows:
    runs-on: windows-latest
    needs: ['prebuild-ubuntu']
    env:
      CC: 'clang-cl'
      CXX: 'clang-cl'
      NEXTEST_RETRIES: 3
    steps:
      - name: install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
        with:
          ref: release
      - name: install prebuilt
        uses: actions/download-artifact@v4
        with:
          name: prebuilt-windows
          path: zng-view-prebuilt/lib
      - run: cargo to test --lib --bins --tests --nextest
      - run: cargo clean
      - run: cargo do test --doc
      - run: cargo clean
      - run: cargo do test --macro --all
      - run: cargo clean
  test-macos:
    runs-on: macos-13
    needs: ['prebuild-macos']
    env:
      NEXTEST_RETRIES: 3
    steps:
      - name: install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
        with:
          ref: release
      - name: install prebuilt
        uses: actions/download-artifact@v4
        with:
          name: prebuilt-macos
          path: zng-view-prebuilt/lib
      - run: cargo to test --lib --bins --tests --nextest
      - run: cargo clean
      - run: cargo do test --doc
      - run: cargo clean
      - run: cargo do test --macro --all
      - run: cargo clean

  test-cargo-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do publish --test

  test-semver-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          shared-key: zng-semver-checks

  tag:
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-windows, test-macos, test-cargo-publish, test-semver-checks]
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.publish_version_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release
      - id: publish_version_tag
        run: cargo do publish_version_tag --execute | tail -n 1 >> "$GITHUB_OUTPUT"
  
  publish-release:
    runs-on: ubuntu-latest
    needs: [tag]
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: prebuilt-ubuntu
          path: prebuilt
      - uses: actions/download-artifact@v4
        with:
          name: prebuilt-windows
          path: prebuilt
      - uses: actions/download-artifact@v4
        with:
          name: prebuilt-macos
          path: prebuilt
      - run: ls --all ./prebuilt
      - name: publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.tag.outputs.tag_name }}
          artifacts: "prebuilt/*"

  publish-doc:
    runs-on: ubuntu-latest
    needs: [tag]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: zng-ui/zng-ui.github.io
          ref: main
          token:  ${{ secrets.PAGES_DOC_PUSH_TOKEN }}

      - run: rm -rf doc
      - uses: actions/download-artifact@v4
        name: push
        with:
          name: doc
          path: doc
      - run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add -A
          git commit -m ${{ needs.tag.outputs.tag_name }} --quiet
          git push

  publish-crates:
    runs-on: ubuntu-latest
    needs: [publish-release, publish-doc]
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
      - run: cargo do publish --execute ${{ github.run_attempt > 1 && '--no-burst' || '' }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [publish-release, publish-doc]
    steps:
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            prebuilt-*
            doc
          failOnError: false